.data
prompt: .asciiz "Enter an integer: "
sum: 	.asciiz	"Sum: "

.text
.globl main

main:
li $v0, 4
la $a0, prompt
syscall			#syscall to print a string

li $v0, 5
syscall			#syscall for reading an integer

addi $a0, $v0, 0	#get input from $v0 into $a0	
addi $t0, $a0, 0	#transfer input from $a0 into $t0

addi $sp, $sp, -4	#decrement the stack pointer
sw $t0, 0($sp)		#save $t0 onto the stack
li $v0, 4
jal rec	

move $t0, $v0		#move return value into $t0
	
li $v0, 4
la $a0, sum
syscall			#syscall to print a string

li $v0, 1
move $a0, $t0
syscall			#syscall to print an int

addi $sp, $sp, 4
	
li $v0, 10		
syscall			#syscall for exit

rec:
#sp-4      4(sp)
#t0 <- 4(sp)         param 4(sp)
#t0 -> 0(sp)         num 0(sp)
#s0 <- 0(sp)

addi $sp, $sp, -4	#decrement stack pointer
lw $t0, 4($sp)		#load $t0 from the stack as a parameter
sw $t0, 0($sp)		#save value of $t0 into stack
lw $t1, 0($sp)		#load $t1 from the stack as a local variable
bne $t1, $0, reccall	#check to see if $t1 is 0
addi $v0, $0, 0
jr $ra

reccall:
addi $sp, $sp, -4	#decrement the stack pointer
sw $ra, 0($sp)		#save ra onto the stack
lw $s0, 4($sp)		#load stack value into $s0 as a local variable
addi $s0, $s0, -1	#subtract $s0 
addi $sp, $sp, -4	#decrement the stack pointer
sw $s0, 0($sp)		#save $s0 onto stack

jal rec

addi $sp, $sp, 4	#increment stack pointer
addi $sp, $sp, 4	#increment stack pointer
lw $ra, 0($sp)		#get proper return address
addi $sp, $sp, 4	#increment stack pointer
lw $t0, 0($sp)		#get value on stack as a return value
addu $v0, $v0, $t0	#add stack value into $v0 as a return value

jr $ra



